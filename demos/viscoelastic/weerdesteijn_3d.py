# 3d box model based on weerdesteijn et al 2023

from gadopt import *
from weerdesteijn_2d import Weerdesteijn2d
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--dx", default=5, type=float, help="Horizontal resolution in km", required=False)
parser.add_argument("--refined_surface", action='store_true', help="Use refined surface mesh")
parser.add_argument("--refined_box", action='store_true', help="Use refined 3d box mesh")
parser.add_argument("--nz", default=80, type=int, help="Number of vertical layers", required=False)
parser.add_argument("--dt", default=50, type=float, help="Timestep in years", required=False)
parser.add_argument("--Tend", default=110e3, type=float, help="Simulation end time in years", required=False)
args = parser.parse_args()

class Weerdesteijn3d(Weerdesteijn2d):
    name = "weerdesteijn-3d"
    vertical_component = 2

    def __init__(self, refined_surface=False, refined_box=False, **kwargs):
        self.refined_surface = refined_surface
        self.refined_box = refined_box
        log("refined pre init",refined_surface)
        super().__init__(**kwargs)

    def setup_mesh(self):
        if self.refined_box:
            self.bottom_id, self.top_id = 5, 6 # Top/bottom boundary IDs for non extruded meshes
            # Set up a 3d fully unstructured mesh
            if self.LOAD_CHECKPOINT:
                with CheckpointFile(checkpoint_file, 'r') as afile:
                    self.mesh = afile.load_mesh("box_mesh_refined")
            else:
                self.mesh = Mesh(f"./weerdesteijn_box_refined_{round(self.dx/1000)}km.msh", name="box_mesh_refined")
        else:
            # Set up an extruded mesh which is same setup as 2d case
            super().setup_mesh()


    def setup_surface_mesh(self):
        # Surface mesh with refinement near ice load can be generated by running:
        # gmsh -2 weerdesteijn_box_refined_surface.geo -setnumber refined_dx 5
        # which gives resolution of 5 km near ice load. 
        if self.refined_surface:
            return Mesh(f"./weerdesteijn_box_refined_surface_{round(self.dx/1000)}km.msh", name="surface_mesh")
        else:
            return SquareMesh(self.nx, self.nx, self.L)


    def initialise_r(self):
        return pow(pow(self.X[0], 2) + pow(self.X[1], 2), 0.5)

    def setup_bcs(self):
        super().setup_bcs()
        self.stokes_bcs[self.bottom_id] = {'uz': 0}
        self.stokes_bcs[3] = {'uy': 0}
        self.stokes_bcs[4] = {'uy': 0}
    
    def checkpoint_filename(self):
        if self.refined_box:
            return f"/g/data/vo05/ws9229/viscoelastic/3d_weerdesteijn/{self.name}-refinedbox-isodxz{round(self.dx/1000)}km-dt{self.dt_years}years-chk.h5"
        else:
            return f"/g/data/vo05/ws9229/viscoelastic/3d_weerdesteijn/{self.name}-refinedsurface{self.refined_surface}-dx{round(self.dx/1000)}km-nz{self.nz}-dt{self.dt_years}years-scaling-chk.h5"
    
    def displacement_filename(self):
        if self.refined_box:
            return f"displacement-{self.name}-refinedbox-isodxz{round(self.dx/1000)}km-dt{self.dt_years}years.dat"
        else:
            return f"displacement-{self.name}-refinedsurface{self.refined_surface}-dx{round(self.dx/1000)}km-nz{self.nz}-dt{self.dt_years}years-scaling.dat"


if __name__ == "__main__":
    simulation = Weerdesteijn3d(dx=args.dx*1e3, refined_surface=args.refined_surface, refined_box=args.refined_box, nz=args.nz, dt_years=args.dt, Tend_years=args.Tend)
    simulation.run_simulation()
